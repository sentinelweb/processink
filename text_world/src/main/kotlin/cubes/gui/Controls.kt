package cubes.gui


//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import cubes.CubesContract
import cubes.CubesContract.BackgroundShaderType.*
import cubes.CubesContract.Control.*
import cubes.CubesContract.Event
import cubes.CubesContract.Formation.*
import cubes.CubesContract.Model3D.MILLENIUM_FALCON
import cubes.CubesContract.Model3D.TERMINATOR
import cubes.CubesContract.TextTransition.*
import cubes.models.TextList
import cubes.shaders.LineShader
import cubes.util.wrapper.FilesWrapper
import io.reactivex.Observable
import io.reactivex.subjects.BehaviorSubject
import io.reactivex.subjects.Subject
import org.drjekyll.fontchooser.FontDialog
import java.awt.*
import java.awt.event.ActionEvent
import java.awt.event.KeyEvent
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.io.File
import javax.swing.*

fun main() {
    val filesDir = FilesWrapper(File(System.getProperty("user.home"), "cubes"))
    Controls(filesDir)
        .showWindow()
}

/**
 * TODO make a model object to hold data
 */
class Controls(
    private var files: FilesWrapper
) {

    private lateinit var controlPanel: ControlsPanel
    private val events: Subject<Event> = BehaviorSubject.create()

    fun events(): Observable<Event> = events

    fun showWindow() {
        SwingUtilities.invokeLater {
            val frame = JFrame("Controls")
            frame.defaultCloseOperation = JFrame.DO_NOTHING_ON_CLOSE
            frame.addWindowListener(object : WindowAdapter() {
                override fun windowClosing(e: WindowEvent) {
                    events.onNext(Event(MENU_EXIT, null))
                }
            })
            val menuBar = makeMenu()
            controlPanel = ControlsPanel()
            //controlPanel.setOpaque(true) //content panes must be opaque

            frame.add(controlPanel)
            frame.setJMenuBar(menuBar)
            // Display the window.
            frame.pack()
            frame.isVisible = true
        }
    }

    private fun showOpenDialog(title: String, currentDir: File?, chosen: (File) -> Unit) {
        JFileChooser().apply {
            isMultiSelectionEnabled = false
            fileSelectionMode = JFileChooser.FILES_ONLY
            currentDir.let { currentDirectory = it }
            val result = showOpenDialog(controlPanel)
            if (result == JFileChooser.APPROVE_OPTION) {
                chosen(selectedFile)
            }
        }
    }

    private fun showSaveDialog(title: String, currentDir: File?, chosen: (File) -> Unit) {
        JFileChooser().apply {
            isMultiSelectionEnabled = false
            fileSelectionMode = JFileChooser.FILES_ONLY
            currentDir.let { currentDirectory = it }
            val result = showSaveDialog(controlPanel)
            if (result == JFileChooser.APPROVE_OPTION) {
                chosen(selectedFile)
            }
        }
    }

    inner class ControlsPanel : JPanel() {
        var stateList: JList<File>
        var textList: JList<File>

        init {
            preferredSize = Dimension(1100, 760)
            layout = BorderLayout()

            // west panel - states/texts
            add(JPanel().apply {
                preferredSize = Dimension(200, 400)
                layout = BoxLayout(this, BoxLayout.PAGE_AXIS)
                add(JPanel().apply {
                    titledBorder("State")
                    val stateFiles = files.stateDir.listFiles()?.toList() ?: listOf()
                    JList<File>()
                        .also { stateList = it }
                        .setup(stateFiles) { events.onNext(Event(MENU_OPEN_STATE, it)) }
                        .also { add(it) }

                })
                add(JPanel().apply {
                    titledBorder("Text")
                    val textFiles = files.textDir.listFiles()?.toList() ?: listOf()
                    JList<File>()
                        .also { textList = it }
                        .setup(textFiles) { events.onNext(Event(MENU_OPEN_TEXT, it)) }
                        .also { add(it) }

                })
            }, BorderLayout.WEST)

            // east panel - shader
            add(JPanel().apply {
                preferredSize = Dimension(200, 400)
                layout = BoxLayout(this, BoxLayout.PAGE_AXIS)
                titledBorder("Background")
                add(JButton("BG Color").apply {
                    addActionListener {
                        val color = JColorChooser.showDialog(this, "Background Color", Color.WHITE)
                        color?.let {
                            events.onNext(Event(BG_COLOR, it))

                            @Suppress("LABEL_NAME_CLASH")
                            this@apply.background = it
                        }
                    }
                })
                add(JButton("None").setup { events.onNext(Event(SHADER_BG, NONE)) })
                add(JButton("Fuji").setup { events.onNext(Event(SHADER_BG, FUJI)) })
                add(JButton("Deform").setup { events.onNext(Event(SHADER_BG, DEFORM)) })
                add(JButton("Monjori").setup { events.onNext(Event(SHADER_BG, MONJORI)) })
                add(JButton("Eclipse").setup { events.onNext(Event(SHADER_BG, ECLIPSE)) })
                add(JButton("OneWarp").setup { events.onNext(Event(SHADER_BG, ONEWARP)) })
                add(JButton("ProcWarp").setup { events.onNext(Event(SHADER_BG, PROCWARP)) })
                add(JButton("Nebula").setup { events.onNext(Event(SHADER_BG, NEBULA)) })
                add(JButton("ColdFlame").setup { events.onNext(Event(SHADER_BG, COLDFLAME)) })
                add(JButton("Refraction").setup { events.onNext(Event(SHADER_BG, REFRACTION_PATTERN)) })
                add(JButton("Water").setup { events.onNext(Event(SHADER_BG, WATER)) })
                add(JButton("Fractal pyramid").setup { events.onNext(Event(SHADER_BG, FRACTAL_PYRAMID)) })
                add(JButton("Octagrams").setup { events.onNext(Event(SHADER_BG, OCTAGRAMS)) })
                add(JButton("Protean clouds").setup { events.onNext(Event(SHADER_BG, PROTEAN_CLOUDS)) })
                add(JButton("Clouds").setup { events.onNext(Event(SHADER_BG, CLOUDS)) })
            }, BorderLayout.EAST)

            // center panel - motion, text
            add(JPanel().apply {
                layout = BoxLayout(this, BoxLayout.PAGE_AXIS)
                // cubes panel
                add(JPanel().apply {
                    layout = GridLayout(-1, 1)//BoxLayout(this, BoxLayout.PAGE_AXIS)
                    titledBorder("Animation")
                    // animation
                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.LINE_AXIS)
                        add(
                            JSlider(0, 5000)
                                .setup(0, 1, 500, false) {
                                    val source = it.source as JSlider
                                    events.onNext(Event(MOTION_ANIMATION_TIME, source.value.toFloat()))
                                }
                                .apply { value = 3000 }
                        )
                    })
                })
                add(JPanel().apply {
                    layout = GridLayout(-1, 1)//BoxLayout(this, BoxLayout.PAGE_AXIS)
                    titledBorder("Cubes")

                    // speed
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)
                            add(
                                JSlider(-400, 400)
                                    .setup(0, 1, 200, false) {
                                        val source = it.source as JSlider
                                        events.onNext(Event(CUBES_ROTATION_SPEED, source.value.toFloat()))
                                    })
                            add(JButton("0ffset").setup { events.onNext(Event(CUBES_ROTATION_OFFEST_RESET)) })
                            add(
                                JSlider(-100, 100)
                                    .setup(0, 1, 50, false) {
                                        val source = it.source as JSlider
                                        events.onNext(Event(CUBES_ROTATION_OFFEST_SPEED, source.value.toFloat()))
                                    }
                                    .apply { value = 1 }
                            )
                        }.wrapWithLabel("Speed", 100)
                    )

                    // rotation
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)
                            add(JToggleButton("X")
                                .setup(true) { ae ->
                                    events.onNext(
                                        Event(CUBES_ROTATION, Pair(CubesContract.RotationAxis.X, isSelected(ae)))
                                    )
                                })
                            add(JToggleButton("Y")
                                .setup(true) { ae ->
                                    events.onNext(
                                        Event(CUBES_ROTATION, Pair(CubesContract.RotationAxis.Y, isSelected(ae)))
                                    )
                                })
                            add(JToggleButton("Z")
                                .setup(true) { ae ->
                                    events.onNext(
                                        Event(CUBES_ROTATION, Pair(CubesContract.RotationAxis.Z, isSelected(ae)))
                                    )
                                })
                            add(JButton("0")
                                .setup { events.onNext(Event(CUBES_ROTATION_RESET)) })
                            add(JButton("Align").setup { events.onNext(Event(CUBES_ROTATION_ALIGN)) })
                            add(JToggleButton("Visible")
                                .setup(true) { ae -> events.onNext(Event(CUBES_VISIBLE, isSelected(ae))) })
                        }
                            .wrapWithLabel("Rotation", 100))

                    // translation
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)
                            add(JButton("grid")
                                .setup { events.onNext(Event(CUBES_FORMATION, GRID)) })
                            add(JButton("line")
                                .setup { events.onNext(Event(CUBES_FORMATION, LINE)) })
                            add(JButton("square")
                                .setup { events.onNext(Event(CUBES_FORMATION, SQUARE)) })
                            add(JButton("0")
                                .setup { events.onNext(Event(CUBES_FORMATION, CENTER)) })
                        }.wrapWithLabel("Position", 100)
                    )

                    // scale
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)

                            add(
                                JSlider(0, 400)
                                    .setup(0, 1, 200, false) {
                                        val source = it.source as JSlider
                                        events.onNext(Event(CUBES_SCALE_BASE, source.value.toFloat()))
                                    }
                            )
                            add(
                                JSlider(0, 400)
                                    .setup(0, 1, 200, false) {
                                        val source = it.source as JSlider
                                        events.onNext(Event(CUBES_SCALE_OFFSET, source.value.toFloat()))
                                    }.wrapWithLabel("Dist")
                            )
                            add(JButton("Apply").setup { events.onNext(Event(CUBES_SCALE_APPLY)) })
                        }.wrapWithLabel("Scale", 100)
                    )

                    // fill
                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.LINE_AXIS)
                        add(JButton("Start").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Fill Start Color", Color.WHITE)
                                color?.let {
                                    events.onNext(Event(CUBES_COLOR_FILL_START, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JButton("End").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Fill End Color", Color.WHITE)
                                color?.let {
                                    events.onNext(Event(CUBES_COLOR_FILL_END, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JToggleButton("Fill")
                            .setup { ae -> events.onNext(Event(CUBES_FILL, isSelected(ae))) })
                        add(
                            JSlider(0, 255)
                                .setup(0, 1, 64, false) {
                                    val source = it.source as JSlider
                                    events.onNext(Event(CUBES_COLOR_FILL_ALPHA, source.value))
                                }
                                .apply { value = 3000 }
                                .wrapWithLabel("Alpha")
                        )
                    }.wrapWithLabel("Fill"))

                    // stroke
                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.LINE_AXIS)
                        add(JButton("Color").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Stroke Color", Color.WHITE)
                                color?.let {
                                    events.onNext(Event(CUBES_COLOR_STROKE, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JToggleButton("Stroke")
                            .setup { ae -> events.onNext(Event(CUBES_STROKE, isSelected(ae))) })
                        add(
                            JSlider(0, 20)
                                .setup(LineShader.DEFAULT_WEIGHT.toInt(), 1, 5, false) {
                                    val source = it.source as JSlider
                                    events.onNext(Event(CUBES_STROKE_WEIGHT, source.value.toFloat()))
                                }
                        )
                    }.wrapWithLabel("Stroke"))
                })

                add(JPanel().apply {
                    layout = GridLayout(-1, 1)
                    titledBorder("Text Control")

                    // order
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)
                            add(JToggleButton("Visible")
                                .setup { ae -> events.onNext(Event(TEXT_VISIBLE, isSelected(ae))) })
                            add(JLabel("|"))
                            add(JButton("Random")
                                .setup { ae -> events.onNext(Event(TEXT_ORDER, TextList.Ordering.RANDOM)) })
                            add(JButton("Near Random")
                                .setup { ae -> events.onNext(Event(TEXT_ORDER, TextList.Ordering.NEAR_RANDOM)) })
                            add(JButton("In order")
                                .setup { ae -> events.onNext(Event(TEXT_ORDER, TextList.Ordering.INORDER)) })
                            add(JLabel("|"))
                            add(JButton("Font").apply {
                                var selectedFont: Font? = null
                                addActionListener {
                                    val dialog = FontDialog(null as Frame?, "Font Dialog Example", true)
                                    dialog.selectedFont = selectedFont
                                    dialog.defaultCloseOperation = WindowConstants.DISPOSE_ON_CLOSE
                                    dialog.isVisible = true
                                    if (!dialog.isCancelSelected) {
                                        System.out.printf("Selected font is: %s%n", dialog.selectedFont)
                                        selectedFont = dialog.selectedFont
                                        // listener.textFont(dialog.selectedFont)
                                        events.onNext(Event(TEXT_FONT, dialog.selectedFont))
                                    }
                                }
                                isOpaque = true
                            })
                        }.wrapWithLabel("Ordering")
                    )


                    // motion
                    add(
                        JPanel().apply {
                            layout = BoxLayout(this, BoxLayout.X_AXIS)
                            add(JButton("Fade")
                                .setup { ae -> events.onNext(Event(TEXT_MOTION, FADE)) })
                            add(JButton("fade-zoom")
                                .setup { ae -> events.onNext(Event(TEXT_MOTION, FADE_ZOOM)) })
                            add(JButton("spin x")
                                .setup { ae -> events.onNext(Event(TEXT_MOTION, SPIN)) })

                        }.wrapWithLabel("Motion")
                    )

                    // fill
                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.LINE_AXIS)
                        add(JButton("Start").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Fill Start Color", Color.WHITE)
                                color?.let {
                                    //listener.textFillColor(it)
                                    events.onNext(Event(TEXT_COLOR_FILL, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JButton("End").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Fill End Color", Color.WHITE)
                                color?.let {
                                    events.onNext(Event(TEXT_COLOR_FILL_END, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JToggleButton("Fill")
                            .setup { ae -> events.onNext(Event(TEXT_FILL, isSelected(ae))) })
                        add(
                            JSlider(0, 255)
                                .setup(0, 1, 64, false) {
                                    val source = it.source as JSlider
                                    events.onNext(Event(TEXT_FILL_ALPHA, source.value))
                                }
                                .apply { value = 255 }
                                .wrapWithLabel("Alpha")
                        )
                    }.wrapWithLabel("Fill"))

                    // stroke
                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.LINE_AXIS)
                        add(JButton("Color").apply {
                            addActionListener {
                                val color = JColorChooser.showDialog(this, "Stroke Color", Color.WHITE)
                                color?.let {
                                    //listener.textStrokeColor(it)
                                    events.onNext(Event(TEXT_COLOR_STROKE, it))
                                    @Suppress("LABEL_NAME_CLASH")
                                    this@apply.background = it
                                }
                            }
                            isOpaque = true
                        })
                        add(JToggleButton("Stroke")
                            .setup { ae -> events.onNext(Event(TEXT_STROKE, isSelected(ae))) })
                        add(
                            JSlider(0, 20)
                                .setup(LineShader.DEFAULT_WEIGHT.toInt(), 1, 5, false) {
                                    val source = it.source as JSlider
                                    events.onNext(Event(TEXT_STROKE_WEIGHT, source.value.toFloat()))
                                    //listener.textStrokeWeight(source.value.toFloat())
                                }
                        )
                    }.wrapWithLabel("Stroke"))

                })
                add(JPanel().apply {
                    layout = GridLayout(-1, 1)
                    titledBorder("Objects")

                    add(JPanel().apply {
                        layout = BoxLayout(this, BoxLayout.X_AXIS)
                        add(JToggleButton("Terminator").setup { ae -> addOrRemoveModel(ae, TERMINATOR) })
                        add(JToggleButton("MF").setup { ae -> addOrRemoveModel(ae, MILLENIUM_FALCON) })
                        add(JToggleButton("Buddah").setup { ae -> addOrRemoveImage(ae, "buddha.svg") })
                        add(JToggleButton("Yin Yang").setup { ae -> addOrRemoveImage(ae, "yinyang.svg") })
                        add(JToggleButton("Hand").setup { ae -> addOrRemoveImage(ae, "buddhism_hand2.svg") })
                    }, BorderLayout.CENTER)
                })
            }, BorderLayout.CENTER)
        }

        private fun addOrRemoveModel(ae: ActionEvent, data: CubesContract.Model3D) {
            if (isSelected(ae)) {
                events.onNext(Event(ADD_MODEL, data))
            } else {
                events.onNext(Event(REMOVE_MODEL, data))
            }
        }

        private fun addOrRemoveImage(ae: ActionEvent, data: String) {
            if (isSelected(ae)) {
                events.onNext(Event(ADD_IMAGE, data))
            } else {
                events.onNext(Event(REMOVE_IMAGE, data))
            }
        }

        private fun isSelected(ae: ActionEvent) = (ae.source as JToggleButton).isSelected

        private fun isSelectedDeselectOthers(ae: ActionEvent): Boolean {
            val jToggleButton = ae.source as JToggleButton
            val selected = jToggleButton.isSelected
            jToggleButton.parent.components.forEach { component ->
                if (component != jToggleButton && component is JToggleButton) {
                    component.isSelected = false
                }
            }
            return selected
        }

    }

    private fun makeMenu(): JMenuBar {
        val menuBar = JMenuBar()

        //create menus
        val stateMenu = JMenu("State")
        stateMenu.mnemonic = KeyEvent.VK_F
        //create menu items
        val openStateMenuItem = JMenuItem("Open State")
        openStateMenuItem.mnemonic = KeyEvent.VK_O
        //openStateMenuItem.icon("baseline_movie_black_18.png")
        openStateMenuItem.actionCommand = "Open"
        openStateMenuItem.addActionListener {
            showOpenDialog("Open state", files.stateDir) {
                events.onNext(Event(MENU_OPEN_STATE, it))
            }
        }
        stateMenu.add(openStateMenuItem)

        val saveStateMenuItem = JMenuItem("Save State")
        saveStateMenuItem.mnemonic = KeyEvent.VK_S
        //saveStateMenuItem.icon("baseline_movie_black_18.png")
        saveStateMenuItem.actionCommand = "Save"
        saveStateMenuItem.addActionListener {
            showSaveDialog("Save state", files.stateDir) {
                events.onNext(Event(MENU_SAVE_STATE, it))
            }
        }
        stateMenu.add(saveStateMenuItem)

        stateMenu.addSeparator()

        val refreshMenuItem = JMenuItem("Refresh")
        refreshMenuItem.mnemonic = KeyEvent.VK_S
        //saveStateMenuItem.icon("baseline_movie_black_18.png")
        refreshMenuItem.actionCommand = "Refresh"
        refreshMenuItem.addActionListener {
            refreshFiles()
        }
        stateMenu.add(refreshMenuItem)
        menuBar.add(stateMenu)

        val textMenu = JMenu("Text")
        textMenu.mnemonic = KeyEvent.VK_F
        //create menu items
        val openTextMenuItem = JMenuItem("Open Text")
//        openTextMenuItem.mnemonic = KeyEvent.VK_O
        //openTextMenuItem.icon("baseline_movie_black_18.png")
        openTextMenuItem.actionCommand = "Open"
        openTextMenuItem.addActionListener {
            showOpenDialog("Open text", files.textDir) {
                events.onNext(Event(MENU_OPEN_TEXT, it))
            }
        }
        textMenu.add(openTextMenuItem)
        val saveTextMenuItem = JMenuItem("Save Text")
//        saveTextMenuItem.mnemonic = KeyEvent.VK_S
        //saveTextMenuItem.icon("baseline_movie_black_18.png")
        saveTextMenuItem.actionCommand = "Save"
        saveTextMenuItem.addActionListener {
            showSaveDialog("Save text", files.textDir) {
                events.onNext(Event(MENU_OPEN_TEXT, it))
            }
        }
        textMenu.add(saveTextMenuItem)
        menuBar.add(textMenu)
        return menuBar
    }

    fun refreshFiles() {
        val stateFiles = files.stateDir.listFiles()?.toList() ?: listOf()
        controlPanel.stateList.setData(stateFiles)

        val textFiles = files.textDir.listFiles()?.toList() ?: listOf()
        controlPanel.textList.setData(textFiles)
    }
}
